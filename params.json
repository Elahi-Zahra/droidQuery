{"name":"droidQuery","tagline":"Android port of jQuery","body":"## droidQuery\r\n\r\n---------------------\r\n\r\n### Introduction\r\n\r\n__droidQuery__ is an Android *port* of [jQuery](https://github.com/jquery/jquery), and is designed to\r\nbe as syntactically alike as possible in Java.\r\n\r\nFor those not familiar with *jQuery*, it essentially provides magic for allowing the simultaneous\r\nmanipulation of a set of UI entities (using animations, attributes settings, etc), as well as to\r\nperform complex tasks, such as asynchronous network tasks. *droidQuery* can do all of these things.\r\n\r\nEssentially, *droidQuery* provides this same type of magic for the view hierarchy and `AsyncTasks`, and\r\ncan be used to perform other frequent jobs, such as showing alert messages. Also like *jQuery*,\r\n*droidQuery* allows the addition of extensions to add to the power of the library.\r\n\r\nPopular extensions currently available include [droidProgress](https://github.com/phil-brown/droidProgress), \r\nwhich can show a progress bar or spinner, and [droidMail](https://github.com/phil-brown/droidMail), \r\nwhich allows email to be configured and sent without using `Intent`. A full listing can be found on the\r\n[wiki](https://github.com/phil-brown/droidQuery/wiki/Available-extensions). If you have created a new *droidQuery*\r\nextension, please let me know, and I can add a link on the wiki.\r\n\r\n*droidQuery* is intended to be used by all Android developers, as it greatly simplifies the procedures \r\nfor performing many common tasks. *droidQuery* can also be used to help web developers that are familiar\r\nwith *jQuery* to get into Android development.\r\n\r\n### How to Include droidQuery in your Project\r\n\r\nThe simplest way to include *droidQuery* in your project is to copy [droidquery.jar](https://github.com/phil-brown/droidQuery/blob/master/droidQuery/bin/droidquery.jar)\r\ninto your project's `libs` directory. If the `libs` folder does not exist, create it (this will be\r\nautomatically included in your build path).\r\n\r\n### License\r\n\r\nCopyright 2013 Phil Brown\r\n\r\n*droidQuery* is licensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n### How to Use\r\n\r\n> Note: droidQuery is a work in progress. If you find any bugs or would like functionality that is missing, please create a new issue (https://github.com/phil-brown/droidQuery/issues).\r\n\r\nBelow are some of the most common tasks that *droidQuery* can be used for. A full list, as well as \r\nexamples, is currently under construction in the [wiki](https://github.com/phil-brown/droidQuery/wiki/API-Documentation).\r\nA sample application can also be found in the `droidQueryTest` directory. The relevant code can be found\r\nin [ExampleActivity.java](https://github.com/phil-brown/droidQuery/blob/master/droidQueryTest/src/self/philbrown/droidQuery/Example/ExampleActivity.java).\r\nYou may also browse the *javadocs* [here](https://github.com/phil-brown/droidQuery/tree/gh-pages/droidQuery/doc/index.html).\r\nFinally, most of the [jQuery API Documentation](http://api.jquery.com) is sufficient to explain the *droidQuery* API.\r\n\r\nTo **instantiate** a new *droidQuery*, you need to pass in a `Context`, a `View`, or set of `View`s. The\r\nsimplest way to create the instance is using the `with` static methods:\r\n\r\n    $.with(Context);\r\n    $.with(View);\r\n    $.with(List<View>);\r\n    $.with(View[]);\r\n    \r\nIf `Context` is passed, *droidQuery* will attempt to manipulate the root view. For example, if `Context`\r\nis an `Activity`, the content view will be selected. There is also a way to select a `View` using it's id:\r\n\r\n    $.with(Context).id(Integer);\r\n    \r\nor, for short:\r\n    \r\n    $.with(Context, Integer);\r\n    \r\nOnce you have the *droidQuery* instance, you can either save it as a variable, or chain calls to manipulate\r\nthe selected `View` or `View`s.\r\n\r\n**Ajax**\r\n\r\nTo perform an asynchronous network task, you can use *ajax*. The most straight-forward way to create and\r\nstart an ajax task is with the `$.ajax(AjaxOptions)` method. For example:\r\n\r\n    ajax(new AjaxOptions().url(\"http://www.example.com\")\r\n                          .type(\"GET\")\r\n                          .dataType(\"text\")\r\n                          .context(this)\r\n                          .success(new Function() {\r\n                              @Override\r\n                              public void invoke($ droidQuery, Object... params) {\r\n                                  droidQuery.alert((String) params[0]);\r\n                              }\r\n                          }).error(new Function() {\r\n                              @Override\r\n                              public void invoke($ droidQuery, Object... params) {\r\n                                  int statusCode = (Integer) params[1];\r\n                                  String error = (String) params[2];\r\n                                  Log.e(\"Ajax\", statusCode + \" \" + error);\r\n                              }\r\n                          }));\r\n\r\n**Attributes**\r\n\r\n*droidQuery* can be used to get or change the attributes of its selected `View`s. The most common\r\nmethods include `attr()` to get an attribute, `attr(String, Object)` to set an attribute, `val()` to\r\nget the value of a UI element (such as `CharSequence` for `TextView`s, `Drawable`s for `ImageView`s, etc),\r\nand `val(Object)` to set the value.\r\n\r\n**Callbacks**\r\n\r\nThe *Callbacks* Object provides a simple way to manage and fire sets of callbacks. To get an instance\r\nof this Object, use `$.Callbacks(this)`.\r\n\r\n**Effects**\r\n\r\n*droidQuery* can be used to animate the selected `View`s. The simplest way to perform a custom animation\r\nis by using the `animate(String, long, Easing, Function)` method. For example:\r\n\r\n    $.with(myView).children().animate(\"{left: 100px, top: 100, width: 50%, height: 50% }\", 400, Easing.LINEAR, new Function() {\r\n    \t@Override\r\n    \tpublic void invoke($ droidQuery, Object... params)\r\n    \t{\r\n    \t\tdroidQuery.toast(\"animation complete\", Toast.LENGTH_SHORT);\r\n    \t}\r\n    });\r\n\r\nIt can also be used to perform pre-configured animations, such as fades (using `fadeIn`, `fadeOut`, \r\n`fadeTo`, and `fadeToggle`) and slides (`slideUp`, `slideDown`, `slideLeft`, and `slideRight`).\r\n\r\n**Events**\r\n\r\n*droidQuery* can be used to register events (such user input or view changes) on the selected UI elements.\r\nThis can be done using the following methods: `bind`, `on`, `one`, `change`, `click`, `longclick`, `swipe`,\r\n`swipeUp`, `swipeLeft`, `swipeDown`, `swipeRight`, `focus`, `focusOut`, `keyDown`, `keyUp`, `keyPress`,\r\n`select`, and `unbind`. For example:\r\n\r\n    //Register a click event\r\n    $.with(this, R.id.btn_refresh).click(new Function() {\r\n\t\t@Override\r\n\t\tpublic void invoke($ droidQuery, Object... params) {\r\n\t\t\tdroidQuery.alert(\"refresh\");\r\n\t\t\trefresh();\r\n\t\t}\r\n    });\r\n    \r\n    //or use the \"on\" method to register a click event.\r\n    $.with(this, R.id.btn_refresh).on(\"click\", new Function() {\r\n    \t@Override\r\n\t\tpublic void invoke($ droidQuery, Object... params) {\r\n    \t\tdroidQuery.toast(\"Refresh\", Toast.LENGTH_LONG);\r\n    \t\trefresh();\r\n\t\t}\r\n    });\r\n\r\n**Selectors**\r\n\r\nThe real magic behind *droidQuery* is its ability to manipulate a set of UI elements at one instance.\r\na `View` or a set of `View`s can be passed to a *droidQuery* instance using any of the *with* methods,\r\nor a new instance of *droidQuery* containing a set of *View*s can be created using any of the selector\r\nmethods, including `view`, `child`, `parent`, `children`, `siblings`, `slice`, `selectAll`, `selectByType`,\r\n`selectChildren`, `selectEmpties`, `selectFocused`, `selectHidden`, `selectVisible`, `id`, `selectImages`,\r\n`selectOnlyChilds`, and `selectParents`.\r\n\r\n**Miscellaneous**\r\n\r\n*droidQuery* also comes with several methods that simplify a lot of common tasks. including:\r\n\r\n* __each(Function)__ - invokes the given function for each selected View\r\n* __map(String)/map(JSONObject)__ - converts a JSON String or a JSONObject to a Map Object\r\n* __map(Entry...)__ - quickly make a Map Object\r\n* __entry(String, Object)__ - quickly make a Map Entry Object\r\n* __alert__ - show an alert dialog\r\n* __toast__ - show a `Toast` message\r\n* __write__ - write text to a file\r\n* __parseJSON__ - parses a JSON string and returns a JSONObject\r\n* __parseXML__ - parses an XML string and returns a Document Object\r\n\r\n**A note about Scripts**\r\n\r\nIn *jQuery*, there is an `Ajax` type called `Script`, which can be used to download a `Javascript` file.\r\nThis type also exists in *droidQuery*, but instead of `Javascript`, it expects a `Bourne` script, which\r\nis runnable on the Android command line. Common usage for such a feature include running an existing script,\r\nwithout the need to port to `Java`, or to run `Android Debug Bridge` (adb) commands. For example, say the\r\n*POST* request to `http://www.example.com/settings` returns a `bourne` script as a response to issue a \r\ncommand based on the current application settings. The command, for example, could broadcast an `Intent`\r\nto open an app:\r\n\r\n    am broadcast -a android.intent.action.CAMERA_BUTTON\r\n    \r\nThe request would likely look like this:\r\n\r\n    $.ajax(\"{url: 'http://www.example.com/settings', type: 'post', dataType: 'script', data: '{id: 4, setting: 1}' }\");\r\n    \r\nand as long as the request was successful, the native camera app would open once the response came back.\r\n\r\nIf the script does not issue an *adb* command, but instead calculates some data, the response would include the script\r\noutput.\r\n\r\n    ","google":"UA-42406660-1","note":"Don't delete this file! It's used internally to help with page regeneration."}